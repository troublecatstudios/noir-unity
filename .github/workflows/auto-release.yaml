name: Auto Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: Release Type
        options:
        - major
        - minor
        - patch

  push:
    branches:
    - stable

env:
  PACKAGEJSON_LOCATION: "Noir.Unity/Assets/TroubleCatStudios/Noir.Unity/"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    # Retrieve the merged PR information
    # -----------------------------
    - uses: actions-ecosystem/action-get-merged-pull-request@v1
      id: get-merged-pull-request
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    # Determine the kind of release to create
    # -----------------------------
    # note: this uses the release/* labels on the merged PR
    # so if no PR was merged then this step won't run.
    - uses: actions-ecosystem/action-release-label@v1
      id: release-label
      if: ${{ steps.get-merged-pull-request.outputs.title != null }}
      with:
        labels: ${{ steps.get-merged-pull-request.outputs.labels }}

    # Get the latest semver tag as our "source version"
    # -----------------------------
    - uses: actions-ecosystem/action-get-latest-tag@v1
      id: get-latest-tag
      with:
        semver_only: true

    # Exit the workflow if there's no release type
    # -----------------------------
    - uses: actions/github-script@v6
      id: check
      if: steps.release-label.outputs.level == null && github.event.inputs.release_type == null
      with:
        script: |
          const { owner, repo } = context.repo
          console.log('Cancelling ...');
          const run_id = "${{ github.run_id }}";
          await github.rest.actions.cancelWorkflowRun({ owner, repo, run_id });
          return 'stop'
        result-encoding: string
    - name: Waiting for cancellation
      if: steps.release-label.outputs.level == null && github.event.inputs.release_type == null
      run: sleep 60

    # Increment the version according to the semver release type
    # -----------------------------
    # note: this uses either the release type from the actions-ecosystem/action-release-label
    # step or the type chosen in the workflow_dispatch
    - uses: actions-ecosystem/action-bump-semver@v1
      id: bump-semver
      if: steps.release-label.outputs.level != null || github.event.inputs.release_type != null
      with:
        current_version: ${{ steps.get-latest-tag.outputs.tag }}
        level: ${{ steps.release-label.outputs.level && steps.release-label.outputs.level || github.event.inputs.release_type }}

    # Apply the version update to the package.json file
    # -----------------------------
    - name: Setup Node
      uses: actions/setup-node@v3.1.0
      with:
        node-version: '16'
    - name: Bump package.json version
      run: |
        cd ${PACKAGEJSON_LOCATION}
        npm --no-git-tag-version version ${{ steps.bump-semver.outputs.new_version }}

    # Extract the release notes from the PR body
    # -----------------------------
    - uses: actions-ecosystem/action-regex-match@v2
      id: regex-match
      if: ${{ steps.bump-semver.outputs.new_version != null }}
      with:
        text: ${{ steps.get-merged-pull-request.outputs.body }}
        regex: '```release_note([\s\S]*)```'

    # Update the changelog
    # -----------------------------
    - name: Update Changelog
      if: ${{ steps.bump-semver.outputs.new_version != null }}
      run: |
        changelog="##${{ steps.bump-semver.outputs.new_version }}\n${{ steps.regex-match.outputs.group1 }}"
        sed -i "s/<!--NEW_CHANGELOG-->/$changelog/" CHANGELOG.md

    - name: Commit new version changes
      if: ${{ steps.bump-semver.outputs.new_version != null }}
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        { git commit -m "${{ steps.bump-semver.outputs.new_version }} CHANGELOG" && git push || true

    # Push version tag
    # -----------------------------
    - uses: actions-ecosystem/action-push-tag@v1
      if: ${{ steps.bump-semver.outputs.new_version != null }}
      with:
        tag: ${{ steps.bump-semver.outputs.new_version }}
        message: "${{ steps.bump-semver.outputs.new_version }}: PR #${{ steps.get-merged-pull-request.outputs.number }} ${{ steps.get-merged-pull-request.outputs.title }}"

    # Create GitHub Release
    # -----------------------------
    - uses: actions/create-release@v1
      if: ${{ steps.bump-semver.outputs.new_version != null }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump-semver.outputs.new_version }}
        release_name: ${{ steps.bump-semver.outputs.new_version }}
        body: ${{ steps.regex-match.outputs.group1 }}

    # Post comment back to PR with release information
    # -----------------------------
    - uses: actions-ecosystem/action-create-comment@v1
      if: ${{ steps.get-merged-pull-request.outputs.title != null }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.get-merged-pull-request.outputs.number }}
        body: |
          The new version [${{ steps.bump-semver.outputs.new_version }}](https://github.com/${{ github.repository }}/releases/tag/${{ steps.bump-semver.outputs.new_version }}) has been released
