using System;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace NoirUnityEditor {
    public class NoirEditorSettings : ScriptableObject {
        internal const string NoirEditorSettingsName = "NoirEditorSettings";
        private static bool TryGetNoirEditorSettings(out string path, out NoirEditorSettings settings) {
            settings = null;
            path = string.Empty;
            var createdAssets = AssetDatabaseUtility.Load<NoirEditorSettings>(searchPaths: "Assets/");
            if (createdAssets.Any()) {
                settings = createdAssets.First();
                path = AssetDatabase.GetAssetPath(settings);
                return true;
            }
            var resource = Resources.Load<NoirEditorSettings>(NoirEditorSettingsName);
            if (resource) {
                settings = resource;
                path = AssetDatabase.GetAssetPath(resource);
                return true;
            }

            var assetsRoot = Application.dataPath.Replace("\\", "/");
            var allFiles = Directory.GetFiles(assetsRoot, "Noir.UnityEditor.asmdef", SearchOption.AllDirectories);
            if (allFiles.Any()) {
                var NoirEditorFolder = Path.GetFullPath(Path.Combine(allFiles[0], "..", ".."));
                var absPath = Path.Combine(NoirEditorFolder, "Resources", $"{NoirEditorSettingsName}.asset").Replace("\\", "/");
                path = absPath.Replace(assetsRoot, string.Empty).Replace("\\", "/");
                if (path.StartsWith("/")) {
                    path = path.Substring(1);
                }
            }

            return false;
        }

        private static NoirEditorSettings CreateNoirEditorSettings(string path) {
            Debug.Log($"Creating NoirEditorSettings at '{path}'");
            if (Path.IsPathFullyQualified(path)) {
                throw new ArgumentException("path must be a path relative to the Assets/ folder.");
            }
            var dir = Path.GetDirectoryName(path).Replace("\\", "/");
            AssetDatabaseUtility.Mkdirp(dir);
            var settings = ScriptableObject.CreateInstance<NoirEditorSettings>();
            AssetDatabase.CreateAsset(settings, "Assets/" + path);
            AssetDatabase.SaveAssets();
            return settings;
        }

        internal static NoirEditorSettings GetOrCreateSettings() {
            if (NoirEditorSettings.TryGetNoirEditorSettings(out var path, out var settings)) {
                return settings;
            }
            return NoirEditorSettings.CreateNoirEditorSettings(path);
        }

        [SerializeField] private string _codeGeneratorNamespace = "Noir.Unity";
        [SerializeField] private string _codeGeneratorOutputFolder = "Scripts/AutoGenerated/";

        [SerializeField] private bool _autoCreateAssetsEnabled = true;

        public string CodeGeneratorNamespace { get => _codeGeneratorNamespace; set => _codeGeneratorNamespace = value; }
        public string CodeGeneratorOutputFolder { get => _codeGeneratorOutputFolder; set => _codeGeneratorOutputFolder = value; }

        public bool AutoCreateAssetsEnabled { get => _autoCreateAssetsEnabled; set => _autoCreateAssetsEnabled = value; }
    }
}
